/*
*** ОПИСАНИЕ РЕАЛИЗОВАННОГО ИГРОВОГО ФУНКЦИОНАЛА ***
(это информационный файл, его не нужно подключать в проект)

*** РАБОТА С ИЗОБРАЖЕНИЯМИ (loader.js) ***
IMG['sprite_images.png'] - получение загруженного изображения по имени файла

*** ОБРАБОТКА СОБЫТИЙ СЕНСОРА, МЫШИ И КЛАВИАТУРЫ (control.js) ***
IS_MOBILE - если true то используется тачскрин, иначе - мышь и клавиатура

KEY - объект, содержащий в качестве ключей название клавиш клавиатуры, и true/false в значениях
(true - клавиша нажата, false - клавиша не нажата)
    ПРИМЕР:
    if( KEY.space ) myFunction() - если пробел нажат, запустить функцию myFunction()

CURSOR - объект, содержит координаты мыши (или касания экрана для мобильных устройств) и состояние нажатий
CURSOR.isClicked - если true, то либо зажата левая кнопка мыши, либо игрок касается экрана
CURSOR.x и CURSOR.y - координаты мыши (или координаты касания экрана для мобильных устройств)
    ПРИМЕР:
    if(CURSOR.y >= 0 && CURSOR.isClicked) myFunction() - обработка событий мыши или тачпада

*** РАБОТА С ФОНОВОЙ МУЗЫКОЙ И ЗВУКАМИ (music.js) ***
IS_SOUND_EFFECTS_ON - включены ли звуковые эффекты (true - включены; false - отключены)
BG_MUSIC.volume = 0.7 - установка громкости фоновой музыки 70% (значение может быть от 0 до 1)
playBgMusic(['bgm1.mp3', 'bgm2.mp3'], 0) - запустить список файлов музыки начиная со 0-го 'элемента массива
playSound('se_explosion.mp3') - проиграть звук указанного файла

*** РАБОТА С ИГРОВОЙ СЦЕНОЙ (render.js) ***
VIEW.width - ширина игрового экрана (в пикселях)
VIEW.height - высота игрового экрана (в пикселях)
VIEW.x - x координата центра игрового экрана (округлена до целого числа)
VIEW.y - y координата центра игрового экрана (округлена до целого числа)

VIEW_DEPENDS_OBJECTS_ARR - массив объектов зависящих от изменений размеров экрана
при изменении размеров экрана у этих объектов будет вызван метод object.resizeScreen()
  например положение текстового объекта textScores завит от размеров экрана и его нужно менять при изменении размеров экрана
  тогда textScores добавляем в массив для отслеживания:
  VIEW_DEPENDS_OBJECTS_ARR.push( textScores )
  и записываем что делать при изменении размеров экрана ( метод resizeScreen() )
  textScores.resizeScreen = function() {textScores.x = VIEW.width};

CONTEXT - контекст для отрисовки графики в canvas

*** ИГРОВЫЕ ФУНКЦИИ И МАТЕМАТИЧЕСКИЕ КОНСТАНТЫ (utils.js) ***
_2PI - 2Пи, удобно при работы с радианами (2Пи радиан = 360 градусов)
_RAD - 1 градус в радианах, удобна для конвертации градусов в радианы (например 90 * _RAD - прямой угол в радианах)

  Перед разбором функций стоит упомянуть, что игровые спрайты и анимированные игровые спрайты имеют следующие поля:
  object.x - координата центра спрайта на экране по оси x
  object.y - координата центра спрайта на экране по оси y
  object.width - ширина спрайта (или кадра если это анимированный спрайт)
  object.height - высота спрайта (или кадра если это анимированный спрайт)
  object.imageAngle - угол поворота изображения (по умолчанию 0 радиан - то есть смотрит в право)
  object.direction - направление движения (используется некоторыми функциями, по умолчанию 0 радиан - то есть направлен в право)
  object.isExist - по умолчанию true (можно использовать для удаления объекта например если он улетел за пределы экрана)

getRandomFloatFromRange(min, max) - Функция возвращает случайное дробное число между min и max (не включая max)
checkObjectVisibility(object) - Функция определяющая находится ли объект object в видимой части экрана (вернет true или false)
getDistance(object, target) - Функция возвращает расстояния в пикселях между объектами object и target
moveObject(object, pathSize) - функция перемещения объекта object согласно его направления direction на расстояние pathSize
turnObjectToTarget(object, target, turnAngle) - Функция поворота объекта object к объекту target, на угол turnAngle
moveObjectToTarget(object, target, pathSize) - Функция перемещения объекта object к объекту target на pathSize пикселей
drawLightning(object, target, color=null) - Функция отрисовки электрического разряда между объектами object и target цветом color
    в данной функции задавать цвет не обязательно, по умолчанию он будет случайным из "#ffe0ff", "#e0ffff" или "#ffffe0"

*** КЛАССЫ СПРАЙТОВ И ОТРИСОВКИ ТЕКСТА ***
TextSprite(text = '', x = 0, y = 0, options ) - класс для создания текстовых объектов
  options - это необязательны объект, с настройками текста, он может содержать следующие свойства:
  options.weight - начертание текста ('normal', 'bold', '300')
  options.style - стиль текста ('normal' или 'italic')
  options.size - размер текста в пикселях (по умолчанию 24)
  options.family - семейство шрифтов (по умолчанию 'Arial', можно использовать шрифты подключенные в CSS файле)
  options.color - цвет текста (по умолчанию '#00ff00')
  options.strokeColor - цвет обводки текста (по умолчанию '#00000000' - прозрачный)
  options.strokeWidth - размер обводки текста в пикселях (по умолчанию 0)
  options.align - расположение текста ('left', 'center', 'right')
    ПРИМЕР:
    let text = new Text('Hi', 10, 100, {color: '#ff0000', size: 32});
    text.render('Win'); - метод для замены текста в объекте
    text.draw(); - метод для отрисовки текста

Sprite(imageName, x, y, imageAngle = 0) - класс для создания статичных (не анимированных) спрайтов
  поле imageAngle - не обязательное (по умолчанию = 0), если его задать то direction объекта будет тоже равен imageAngle
    ПРИМЕР:
    let player = new Sprite('player.png', VIEW.x, VIEW.y);
    player.draw(); - метод для отрисовки спрайта

SpriteSheet(imageName, x, y, frameWidth, frameHeight, frames, fps = 60, imageAngle = 0) - класс создания анимированных спрайтов
  поле imageAngle - не обязательное (по умолчанию = 0), если его задать то direction объекта будет тоже равен imageAngle
  поле fps - не обязательное (по умолчанию = 60 - скорость смены кадров в секунду)
    ПРИМЕР:
    let fire = new Text('fire.png', VIEW.x, VIEW.y, 64, 96, 12, 60);
    fire.drawWithAnimation(dt); - метод для отрисовки кадров с учетом скорости анимации (dt - время обновления экрана)
    fire.frame = 4 - задать определенный кадр (нумерация кадров начинается с 0)
    fire.draw(); - метод для отрисовки текущего кадра спрайта (fire.frame) без анимации

TileSprite(tileName, x, y, width, height, horizontalAlign = 'left', verticalAlign = 'top') - класс для создания тайлов
  поле horizontalAlign - центрирование или прижатие к краю тайлов по горизонтали 'left' / 'center' / 'right' (по умолчанию 'left')
  поле verticalAlign - центрирование или прижатие к краю тайлов по вертикали 'top' / 'center' / 'bottom' (по умолчанию 'top')
    ПРИМЕР:
    let background = new TileSprite('tile_32x32px.jpg', 0, 0, 128, 64, 'left', 'top');
    background.draw(); - метод для отрисовки спрайта
*/